// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class APIConfig {
    /**
     * Creates a new APIConfig instance.
     * @param {Partial<APIConfig>} [$$source = {}] - The source object to create the APIConfig.
     */
    constructor($$source = {}) {
        if (!("tag" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["tag"] = "";
        }
        if (!("listen" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["listen"] = "";
        }
        if (!("services" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["services"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new APIConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {APIConfig}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("services" in $$parsedSource) {
            $$parsedSource["services"] = $$createField2_0($$parsedSource["services"]);
        }
        return new APIConfig(/** @type {Partial<APIConfig>} */($$parsedSource));
    }
}

export class AllocateConfig {
    /**
     * Creates a new AllocateConfig instance.
     * @param {Partial<AllocateConfig>} [$$source = {}] - The source object to create the AllocateConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["strategy"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["refresh"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["concurrency"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AllocateConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AllocateConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AllocateConfig(/** @type {Partial<AllocateConfig>} */($$parsedSource));
    }
}

export class Config {
    /**
     * Creates a new Config instance.
     * @param {Partial<Config>} [$$source = {}] - The source object to create the Config.
     */
    constructor($$source = {}) {
        if (!("ActiveVPN" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["ActiveVPN"] = false;
        }
        if (!("DisableRoutes" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["DisableRoutes"] = false;
        }
        if (!("ListMode" in $$source)) {
            /**
             * Принимает значения "blacklist" или "whitelist"
             * @member
             * @type {string}
             */
            this["ListMode"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Config instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Config}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Config(/** @type {Partial<Config>} */($$parsedSource));
    }
}

export class InboundConfig {
    /**
     * Creates a new InboundConfig instance.
     * @param {Partial<InboundConfig>} [$$source = {}] - The source object to create the InboundConfig.
     */
    constructor($$source = {}) {
        if (!("listen" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["listen"] = "";
        }
        if (!("port" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["port"] = 0;
        }
        if (!("protocol" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["protocol"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: any } | undefined}
             */
            this["settings"] = {};
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: any } | undefined}
             */
            this["streamSettings"] = {};
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["tag"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {SniffingConfig | undefined}
             */
            this["sniffing"] = (new SniffingConfig());
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {AllocateConfig | undefined}
             */
            this["allocate"] = (new AllocateConfig());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new InboundConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {InboundConfig}
     */
    static createFrom($$source = {}) {
        const $$createField3_0 = $$createType1;
        const $$createField4_0 = $$createType1;
        const $$createField6_0 = $$createType2;
        const $$createField7_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("settings" in $$parsedSource) {
            $$parsedSource["settings"] = $$createField3_0($$parsedSource["settings"]);
        }
        if ("streamSettings" in $$parsedSource) {
            $$parsedSource["streamSettings"] = $$createField4_0($$parsedSource["streamSettings"]);
        }
        if ("sniffing" in $$parsedSource) {
            $$parsedSource["sniffing"] = $$createField6_0($$parsedSource["sniffing"]);
        }
        if ("allocate" in $$parsedSource) {
            $$parsedSource["allocate"] = $$createField7_0($$parsedSource["allocate"]);
        }
        return new InboundConfig(/** @type {Partial<InboundConfig>} */($$parsedSource));
    }
}

export class ListConfig {
    /**
     * Creates a new ListConfig instance.
     * @param {Partial<ListConfig>} [$$source = {}] - The source object to create the ListConfig.
     */
    constructor($$source = {}) {
        if (!("Type" in $$source)) {
            /**
             * Принимает значения "blacklist" или "whitelist"
             * @member
             * @type {string}
             */
            this["Type"] = "";
        }
        if (!("Rules" in $$source)) {
            /**
             * @member
             * @type {Rule[]}
             */
            this["Rules"] = [];
        }
        if (!("DomainStrategy" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["DomainStrategy"] = "";
        }
        if (!("DomainMatcher" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["DomainMatcher"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ListConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ListConfig}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Rules" in $$parsedSource) {
            $$parsedSource["Rules"] = $$createField1_0($$parsedSource["Rules"]);
        }
        return new ListConfig(/** @type {Partial<ListConfig>} */($$parsedSource));
    }
}

export class LogConfig {
    /**
     * Creates a new LogConfig instance.
     * @param {Partial<LogConfig>} [$$source = {}] - The source object to create the LogConfig.
     */
    constructor($$source = {}) {
        if (!("loglevel" in $$source)) {
            /**
             * 	Access      string `json:"access"`
             * 	Error       string `json:"error"`
             * @member
             * @type {string}
             */
            this["loglevel"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new LogConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {LogConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new LogConfig(/** @type {Partial<LogConfig>} */($$parsedSource));
    }
}

export class OutboundConfig {
    /**
     * Creates a new OutboundConfig instance.
     * @param {Partial<OutboundConfig>} [$$source = {}] - The source object to create the OutboundConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["sendThrough"] = "";
        }
        if (!("protocol" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["protocol"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: any } | undefined}
             */
            this["settings"] = {};
        }
        if (!("tag" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["tag"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: any } | undefined}
             */
            this["streamSettings"] = {};
        }
        if (/** @type {any} */(false)) {
            /**
             * ProxySettings  ProxySettingsConfig    `json:"proxySettings,omitempty"`
             * @member
             * @type {any | undefined}
             */
            this["mux"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new OutboundConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {OutboundConfig}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType1;
        const $$createField4_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("settings" in $$parsedSource) {
            $$parsedSource["settings"] = $$createField2_0($$parsedSource["settings"]);
        }
        if ("streamSettings" in $$parsedSource) {
            $$parsedSource["streamSettings"] = $$createField4_0($$parsedSource["streamSettings"]);
        }
        return new OutboundConfig(/** @type {Partial<OutboundConfig>} */($$parsedSource));
    }
}

export class PolicyConfig {
    /**
     * Creates a new PolicyConfig instance.
     * @param {Partial<PolicyConfig>} [$$source = {}] - The source object to create the PolicyConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: PolicyLevelConfig } | undefined}
             */
            this["levels"] = {};
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {PolicySystemConfig | undefined}
             */
            this["system"] = (new PolicySystemConfig());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PolicyConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PolicyConfig}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType7;
        const $$createField1_0 = $$createType8;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("levels" in $$parsedSource) {
            $$parsedSource["levels"] = $$createField0_0($$parsedSource["levels"]);
        }
        if ("system" in $$parsedSource) {
            $$parsedSource["system"] = $$createField1_0($$parsedSource["system"]);
        }
        return new PolicyConfig(/** @type {Partial<PolicyConfig>} */($$parsedSource));
    }
}

export class PolicyLevelConfig {
    /**
     * Creates a new PolicyLevelConfig instance.
     * @param {Partial<PolicyLevelConfig>} [$$source = {}] - The source object to create the PolicyLevelConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["handshake"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["connIdle"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["uplinkOnly"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["downlinkOnly"] = 0;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsUserUplink"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsUserDownlink"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {number | undefined}
             */
            this["bufferSize"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PolicyLevelConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PolicyLevelConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PolicyLevelConfig(/** @type {Partial<PolicyLevelConfig>} */($$parsedSource));
    }
}

export class PolicySystemConfig {
    /**
     * Creates a new PolicySystemConfig instance.
     * @param {Partial<PolicySystemConfig>} [$$source = {}] - The source object to create the PolicySystemConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsInboundUplink"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsInboundDownlink"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsOutboundUplink"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["statsOutboundDownlink"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PolicySystemConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PolicySystemConfig}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PolicySystemConfig(/** @type {Partial<PolicySystemConfig>} */($$parsedSource));
    }
}

export class RoutingConfig {
    /**
     * Creates a new RoutingConfig instance.
     * @param {Partial<RoutingConfig>} [$$source = {}] - The source object to create the RoutingConfig.
     */
    constructor($$source = {}) {
        if (!("domainStrategy" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["domainStrategy"] = "";
        }
        if (!("domainMatcher" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["domainMatcher"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {RoutingRule[] | undefined}
             */
            this["rules"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["balancers"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RoutingConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RoutingConfig}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType10;
        const $$createField3_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("rules" in $$parsedSource) {
            $$parsedSource["rules"] = $$createField2_0($$parsedSource["rules"]);
        }
        if ("balancers" in $$parsedSource) {
            $$parsedSource["balancers"] = $$createField3_0($$parsedSource["balancers"]);
        }
        return new RoutingConfig(/** @type {Partial<RoutingConfig>} */($$parsedSource));
    }
}

export class RoutingRule {
    /**
     * Creates a new RoutingRule instance.
     * @param {Partial<RoutingRule>} [$$source = {}] - The source object to create the RoutingRule.
     */
    constructor($$source = {}) {
        if (!("type" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["domain"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["ip"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | undefined}
             */
            this["port"] = "";
        }
        if (!("outboundTag" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["outboundTag"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new RoutingRule instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {RoutingRule}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        const $$createField2_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("domain" in $$parsedSource) {
            $$parsedSource["domain"] = $$createField1_0($$parsedSource["domain"]);
        }
        if ("ip" in $$parsedSource) {
            $$parsedSource["ip"] = $$createField2_0($$parsedSource["ip"]);
        }
        return new RoutingRule(/** @type {Partial<RoutingRule>} */($$parsedSource));
    }
}

export class Rule {
    /**
     * Creates a new Rule instance.
     * @param {Partial<Rule>} [$$source = {}] - The source object to create the Rule.
     */
    constructor($$source = {}) {
        if (!("RuleType" in $$source)) {
            /**
             * Принимает значения "domain", "ip", или "port"
             * @member
             * @type {string}
             */
            this["RuleType"] = "";
        }
        if (!("RuleValue" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["RuleValue"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Rule instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Rule}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Rule(/** @type {Partial<Rule>} */($$parsedSource));
    }
}

export class Settings {
    /**
     * Creates a new Settings instance.
     * @param {Partial<Settings>} [$$source = {}] - The source object to create the Settings.
     */
    constructor($$source = {}) {
        if (!("LoggerLevel" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["LoggerLevel"] = "";
        }
        if (!("Autostart" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["Autostart"] = false;
        }
        if (!("HideOnStartup" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["HideOnStartup"] = false;
        }
        if (!("Language" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Language"] = "";
        }
        if (!("StatsUpdateInterval" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["StatsUpdateInterval"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Settings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Settings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Settings(/** @type {Partial<Settings>} */($$parsedSource));
    }
}

export class SniffingConfig {
    /**
     * Creates a new SniffingConfig instance.
     * @param {Partial<SniffingConfig>} [$$source = {}] - The source object to create the SniffingConfig.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["enabled"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string[] | undefined}
             */
            this["destOverride"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["routeOnly"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SniffingConfig instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SniffingConfig}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("destOverride" in $$parsedSource) {
            $$parsedSource["destOverride"] = $$createField1_0($$parsedSource["destOverride"]);
        }
        return new SniffingConfig(/** @type {Partial<SniffingConfig>} */($$parsedSource));
    }
}

export class Xray {
    /**
     * Creates a new Xray instance.
     * @param {Partial<Xray>} [$$source = {}] - The source object to create the Xray.
     */
    constructor($$source = {}) {
        if (!("log" in $$source)) {
            /**
             * @member
             * @type {LogConfig}
             */
            this["log"] = (new LogConfig());
        }
        if (!("api" in $$source)) {
            /**
             * @member
             * @type {APIConfig}
             */
            this["api"] = (new APIConfig());
        }
        if (!("inbounds" in $$source)) {
            /**
             * 	DNS         DNSConfig        `json:"dns"`
             * @member
             * @type {InboundConfig[]}
             */
            this["inbounds"] = [];
        }
        if (!("outbounds" in $$source)) {
            /**
             * @member
             * @type {OutboundConfig[]}
             */
            this["outbounds"] = [];
        }
        if (!("policy" in $$source)) {
            /**
             * @member
             * @type {PolicyConfig}
             */
            this["policy"] = (new PolicyConfig());
        }
        if (/** @type {any} */(false)) {
            /**
             * 	Reverse   ReverseConfig    `json:"reverse"`
             * @member
             * @type {RoutingConfig | null | undefined}
             */
            this["routing"] = null;
        }
        if (!("stats" in $$source)) {
            /**
             * 	Transport   interface{}      `json:"transport"`
             * @member
             * @type {any}
             */
            this["stats"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Xray instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Xray}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType11;
        const $$createField1_0 = $$createType12;
        const $$createField2_0 = $$createType14;
        const $$createField3_0 = $$createType16;
        const $$createField4_0 = $$createType17;
        const $$createField5_0 = $$createType19;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("log" in $$parsedSource) {
            $$parsedSource["log"] = $$createField0_0($$parsedSource["log"]);
        }
        if ("api" in $$parsedSource) {
            $$parsedSource["api"] = $$createField1_0($$parsedSource["api"]);
        }
        if ("inbounds" in $$parsedSource) {
            $$parsedSource["inbounds"] = $$createField2_0($$parsedSource["inbounds"]);
        }
        if ("outbounds" in $$parsedSource) {
            $$parsedSource["outbounds"] = $$createField3_0($$parsedSource["outbounds"]);
        }
        if ("policy" in $$parsedSource) {
            $$parsedSource["policy"] = $$createField4_0($$parsedSource["policy"]);
        }
        if ("routing" in $$parsedSource) {
            $$parsedSource["routing"] = $$createField5_0($$parsedSource["routing"]);
        }
        return new Xray(/** @type {Partial<Xray>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = SniffingConfig.createFrom;
const $$createType3 = AllocateConfig.createFrom;
const $$createType4 = Rule.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = PolicyLevelConfig.createFrom;
const $$createType7 = $Create.Map($Create.Any, $$createType6);
const $$createType8 = PolicySystemConfig.createFrom;
const $$createType9 = RoutingRule.createFrom;
const $$createType10 = $Create.Array($$createType9);
const $$createType11 = LogConfig.createFrom;
const $$createType12 = APIConfig.createFrom;
const $$createType13 = InboundConfig.createFrom;
const $$createType14 = $Create.Array($$createType13);
const $$createType15 = OutboundConfig.createFrom;
const $$createType16 = $Create.Array($$createType15);
const $$createType17 = PolicyConfig.createFrom;
const $$createType18 = RoutingConfig.createFrom;
const $$createType19 = $Create.Nullable($$createType18);
